{"version":3,"sources":["Nav.js","About.js","Shop.js","Home.js","Item.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","to","About","Shop","useEffect","_","fetchItems","useState","items","setItems","a","fetch","method","headers","Headers","data","json","map","item","key","id","name","Home","Item","match","setItem","fetchItem","params","console","log","description","rarity","images","src","icon","alt","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4NAuBeA,MAnBf,WACE,OACE,6BACI,oCACA,wBAAIC,UAAU,aACV,kBAAC,IAAD,CAAMC,GAAG,KACL,qCAEJ,kBAAC,IAAD,CAAMA,GAAG,UACL,sCAEJ,kBAAC,IAAD,CAAMA,GAAG,SACL,wCCLDC,MARf,WACE,OACE,6BACI,4C,gCC4BOC,MA9Bf,WAEIC,qBAAU,SAAAC,GACNC,MACD,IAJS,MAMcC,mBAAS,IANvB,mBAMLC,EANK,KAMEC,EANF,KAQNH,EAAU,uCAAG,WAAMD,GAAN,eAAAK,EAAA,sEACEC,MAAM,gDAAiD,CACpEC,OAAQ,MACRC,QAAS,IAAIC,QAAQ,CACjB,cAAiB,0CAJV,cACXC,EADW,gBAQFA,EAAKC,OARH,OAQfD,EARe,OASfN,EAASM,EAAKP,OATC,2CAAH,sDAYhB,OACI,6BACIA,EAAMS,KAAI,SAAAC,GAAI,OACV,wBAAIC,IAAKD,EAAKE,IACV,kBAAC,IAAD,CAAMnB,GAAE,gBAAWiB,EAAKE,KAAOF,EAAKG,YCjBzCC,MARf,WACE,OACE,6BACI,2CCkCOC,MArCf,YAA0B,IAAVC,EAAS,EAATA,MAAS,EACGjB,mBAAS,IADZ,mBACdW,EADc,KACRO,EADQ,KAErBrB,qBAAU,SAAAC,GACNqB,MACD,IAEH,IAAMA,EAAS,uCAAG,WAAMrB,GAAN,eAAAK,EAAA,sEACGC,MAAM,uCAAD,OAAwCa,EAAMG,OAAOP,GAArD,YAAmE,CACrFR,OAAQ,MACRC,QAAS,IAAIC,QAAQ,CACjB,cAAiB,0CAJX,cACVC,EADU,gBAQDA,EAAKC,OARJ,OAQdD,EARc,OASda,QAAQC,IAAId,EAAKG,MACjBO,EAAQV,EAAKG,MAVC,2CAAH,sDAoBf,OACI,6BACI,4BAAKA,EAAKG,MACV,2BAAIH,EAAKY,aACT,sCAAYZ,EAAKa,QAVjBb,EAAKc,OAWS,yBAAKC,IAAKf,EAAKc,OAAOE,KAAMC,IAAI,KAAY,O,OCRvDC,MAjBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKpC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqC,KAAK,IAAIC,OAAK,EAACC,UAAWjB,IACjC,kBAAC,IAAD,CAAOe,KAAK,SAASC,OAAK,EAACC,UAAWrC,IACtC,kBAAC,IAAD,CAAOmC,KAAK,QAAQC,OAAK,EAACC,UAAWpC,IACrC,kBAAC,IAAD,CAAOkC,KAAK,YAAYC,OAAK,EAACC,UAAWhB,QCN/BiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2DCZNoB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.bf3408b8.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n  return (\n    <nav>\n        <h3>Logo</h3>\n        <ul className=\"nav_links\">\n            <Link to=\"/\">\n                <li>Home</li>\n            </Link>\n            <Link to=\"/about\">\n                <li>About</li>\n            </Link>\n            <Link to=\"/shop\">\n                <li>Shop</li>\n            </Link>\n        </ul>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport './App.css';\n\nfunction About() {\n  return (\n    <div>\n        <h1>About page</h1>\n    </div>\n  );\n}\n\nexport default About;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Link } from \"react-router-dom\";\n\nfunction Shop() {\n\n    useEffect(_ => {\n        fetchItems();\n    }, []);\n\n    const [items, setItems] = useState([]);\n\n    const fetchItems = async _ => {\n        let data = await fetch(\"https://fortniteapi.io/items/upcoming?lang=en\", {\n            method: \"GET\",\n            headers: new Headers({\n                \"Authorization\": \"9b7533d8-8ac46f34-4cc45ff5-1639eaa4\"\n            })\n        });\n\n        data = await data.json();\n        setItems(data.items);\n    }\n\n    return (\n        <div>\n          { items.map(item => (\n                <h1 key={item.id}>\n                    <Link to={`/shop/${item.id}`}>{item.name}</Link>\n                </h1>))}\n        </div>\n    );\n}\n\nexport default Shop;\n","import React from 'react';\nimport './App.css';\n\nfunction Home() {\n  return (\n    <div>\n        <h1>Home page</h1>\n    </div>\n  );\n}\n\nexport default Home;\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\n\nfunction Item({ match }) {\n    const [item, setItem] = useState([]);\n    useEffect(_ => {\n        fetchItem();\n    }, []);\n\n    const fetchItem = async _ => {\n        let data = await fetch(`https://fortniteapi.io/items/get?id=${match.params.id}&lang=en`, {\n            method: \"GET\",\n            headers: new Headers({\n                \"Authorization\": \"9b7533d8-8ac46f34-4cc45ff5-1639eaa4\"\n            })\n        });\n\n        data = await data.json();\n        console.log(data.item)\n        setItem(data.item);\n    }\n\n    function isLoaded() {\n        if (item.images) {\n            return true;\n        }\n\n        return false;\n    }\n    return (\n        <div>\n            <h1>{item.name}</h1>\n            <p>{item.description}</p>\n            <p>Rarity: {item.rarity}</p>\n            {isLoaded() ? <img src={item.images.icon} alt=\"\"></img> : null}\n            \n        </div>\n    );\n}\n\nexport default Item;\n","import React from 'react';\nimport './App.css';\nimport Nav from \"./Nav\";\nimport About from \"./About\";\nimport Shop from \"./Shop\";\nimport Home from \"./Home\";\nimport Item from \"./Item\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"; \n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/about\" exact component={About} />\n          <Route path=\"/shop\" exact component={Shop} />\n          <Route path=\"/shop/:id\" exact component={Item} />\n        </Switch>\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}